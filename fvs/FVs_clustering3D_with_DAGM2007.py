# -*- coding: utf-8 -*-
"""feature_vector_clustering (with hymenoptera).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C0vc9aZUObC8_2B3JOg4_l6UjUVAvBis
"""

import numpy as np
fvs_path = './fvs_clustering/2classes_classifier_(using_Normal)/'
# normal
fvs = np.load(fvs_path + 'fvs_DAGM2007.npy')
label = np.load(fvs_path + 'label_DAGM2007.npy')
print(fvs.shape)
print(label.shape)

# abnormal
fvs_abnormal = np.load(fvs_path + 'fvs_DAGM2007_abnormal.npy')
label_abnormal = np.load(fvs_path + 'label_DAGM2007_abnormal.npy')
label_abnormal_trfm = list(map(lambda x : int(label_abnormal.tolist()[x]) + 2, range(len(label_abnormal))))
label_abnormal_trfm = np.array(label_abnormal_trfm)
print(fvs_abnormal.shape)
print(label_abnormal.shape)

# concat
fvs_concat = np.vstack([fvs,fvs_abnormal])
label_concat = np.vstack([label.reshape((-1, 1)),label_abnormal_trfm.reshape((-1, 1))])
print(fvs_concat.shape)
print(label_concat.shape)


###########################################
# TSNE (for Dimensionality Reduction)
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import animation
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import pandas as pd

def tsne(fvs, label, mid):
  fig = plt.figure(figsize=(10,10))
  ax = Axes3D(fig)
  colors = 'b', 'r'
  labels = 'Group1', 'Group2'

  tsne = TSNE(n_components=3)
  tsne_fit = tsne.fit_transform(fvs)
  # df_tsne = pd.DataFrame(tsne_fit, columns=['x', 'y', 'z'])
  # df_label = pd.DataFrame(label, columns=['label'])
  # r = pd.concat([df_label, df_tsne],axis=1)

  ax.scatter(tsne_fit[:, 0][:mid], tsne_fit[:, 1][:mid], tsne_fit[:, 2][:mid],  c= 'r', s = 100)
  ax.scatter(tsne_fit[:, 0][mid:], tsne_fit[:, 1][mid:], tsne_fit[:, 2][mid:],  c= 'b', s = 100)
  plt.show()
  # plt.title('TSNE (with Feature Vectors from Resnet18 model using DAGM2007)')

  # for i, c, label in zip(range(len(labels)), colors, labels):
  #       ax.scatter(tsne_fit[data['Group']==i, 0], tsne_fit[data['Group']==i, 1], tsne_fit[data['Group']==i, 2], s=30, c=c, label=label, alpha=0.5)
  # fig.legend()

  return fig, ax
  


  ############################
  # 해당 군집에 대한 label 표시

#   num_classes_normal = 2
#   num_classes = num_classes_normal*2
#   for l in range(num_classes):
#     for i in range(len(r[r.label== l])):
#       x = r[r.label== l]['tsne_x'].values[i]
#       y = r[r.label== l]['tsne_y'].values[i]
#       if l == 0:
#         plt.text(x, y, str(l), fontsize=10, color='r')
#       elif l == 1:
#         plt.text(x, y, str(l), fontsize=10, color='g')
#       else:
#         plt.text(x, y, str(l), fontsize=10, color='black')
#   plt.show()


fig, ax = tsne(fvs_concat, label_concat, len(fvs))

def rotate(angle):
     ax.view_init(azim=angle)

angle = 3
ani = animation.FuncAnimation(fig, rotate, frames=np.arange(0, 360, angle), interval=50)
ani.save('inhadr_tsne1.gif', writer=animation.PillowWriter(fps=20))

