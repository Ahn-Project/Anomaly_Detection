# -*- coding: utf-8 -*-
"""feature_vector_clustering (with hymenoptera).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C0vc9aZUObC8_2B3JOg4_l6UjUVAvBis
"""

###########################################
# TSNE (for Dimensionality Reduction) & grouping with colors
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd

def euclidean_similarity(v1, v2):
  from scipy.spatial import distance

  dst = distance.euclidean(v1, v2)
  similarity_score = 1/(1+dst)
  return similarity_score


def tsne(fvs, label):
  tsne = TSNE()
  tsne_fit = tsne.fit_transform(fvs[:len(fvs)])

  tsne_x = pd.DataFrame(tsne_fit[:, 0], columns=['tsne_x'])
  tsne_y = pd.DataFrame(tsne_fit[:, 1], columns=['tsne_y'])
  df_tsne = pd.concat([tsne_x, tsne_y], axis=1)
  df_label = pd.DataFrame(label, columns=['label'])
  data = pd.concat([df_label, df_tsne],axis=1)

  # plt.scatter(tsne_fit[:, 0], tsne_fit[:, 1])

  colors = 'r', 'black', 'b', 'y'
  labels = 'Class2_Normal', 'Class2_Abnormal', 'Class6_Normal', 'Class6_Abnormal'
  for i, c, label in zip(range(len(labels)), colors, labels):
        plt.scatter(tsne_fit[data['label']==i, 0], tsne_fit[data['label']==i, 1], c=c, label=label, alpha=0.5)
  plt.title('TSNE of FVs from 4classes_classifier_{} (seperated by colors)'.format(version))
  plt.legend()
  # plt.show()

  return tsne_fit, data, labels


# 유사도 계산
def cal_score(tsne_fit, data, labels):
  similarity_scores = []
  for i in range(len(labels)):
      tempx = tsne_fit[data['label'] == i, 0]
      tempy = tsne_fit[data['label'] == i, 1]
      # plt.scatter(tempx, tempy, label=str(i), alpha=0.5)

      if i%2 == 0:
          mean_x = np.mean(tempx)
          mean_y = np.mean(tempy)
          mean_xy = np.array([mean_x, mean_y])  # 유사도 기준 벡터 정의
          # plt.scatter(mean_x, mean_y, c='r', s=50)

      scores = []
      tsne_xy = np.stack((tempx, tempy), axis=1)  # 유사도 대상 벡터 정의

      for xy in tsne_xy:
          score = euclidean_similarity(mean_xy, xy)  # 모든 대상 벡터에 대한 유사도 계산
          scores.append(score)

      similarity_scores.append(scores)  # 클래스별 유사도 append

  return similarity_scores


if __name__ == "__main__":
  ### Load
  version = 'ver3'
  fvs_path = './fvs/4classes_classifier_(using_Normal_and_Abnormal)_{}/'.format(version)
  # normal
  fvs = np.load(fvs_path + 'fvs_DAGM2007_normal_and_abnormal_{}.npy'.format(version))
  label = np.load(fvs_path + 'label_DAGM2007_normal_and_abnormal_{}.npy'.format(version))
  print(fvs.shape)
  print(label.shape)

  # tsne & similarity_scores
  tsne_fit, data, labels = tsne(fvs, label)
  similarity_scores = cal_score(tsne_fit, data, labels)

  from collections import Counter
  for i, label in enumerate(labels):
      max_score = np.max(similarity_scores[i])
      min_score = np.min(similarity_scores[i])
      print('highest similarity score of {} : {}'.format(label, max_score))
      print('lowest similarity score of {} : {}'.format(label, min_score))

      if i%2 == 0:
          min_score_normal = min_score
      elif i%2 == 1:
          num_misclassified = Counter(min_score_normal < np.array(similarity_scores[i]))
          keys = num_misclassified.keys()
          if True in keys:
              print('misclassification rate of {} : {} / {}'.format(label, dict(num_misclassified)[True], len(similarity_scores[i])))
              print('=' * 20)
          else:
              print('misclassification rate of {} : {} / {}'.format(label, 0, len(similarity_scores[i])))
              print('=' * 20)






